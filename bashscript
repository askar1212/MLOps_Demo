#!/bin/bash

# Define variables
EMAIL="example@email.com"
NAME="My New Account"
ROLE_NAME="OrganizationAccountAccessRole"

# Create the new AWS account
ACCOUNT_ID=$(aws organizations create-account --email $EMAIL --account-name $NAME --role-name $ROLE_NAME --query 'CreateAccountStatus.AccountId' --output text)

# Wait for the new account to be created and enabled
echo "Waiting for the new account to be created and enabled..."
while [ "$(aws organizations describe-create-account-status --create-account-request-id $ACCOUNT_ID --query 'CreateAccountStatus.State' --output text)" != "SUCCEEDED" ]
do
  sleep 10
done
echo "New account created and enabled!"

# Configure AWS CLI for the new account
aws configure set profile.$ACCOUNT_ID.role_arn arn:aws:iam::$ACCOUNT_ID:role/$ROLE_NAME --profile $ACCOUNT_ID

# Test the new configuration
echo "Testing the new configuration..."
aws s3 ls --profile $ACCOUNT_ID

----------------------------------------------------------

provider "aws" {
  region = "us-east-1" // or your preferred region
}

resource "aws_organizations_account" "example_account" {
  name = "example-account"
  email = "example@example.com"
  role_name = "example-role"
}

resource "aws_iam_role" "example_role" {
  name = "example-role"
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          AWS = "arn:aws:iam::${aws_organizations_account.example_account.id}:root"
        }
      }
    ]
  })
}

resource "aws_iam_access_key" "example_access_key" {
  user = aws_iam_role.example_role.name
}

provider "aws" {
  alias = "example_provider"
  region = "us-west-2" // or your preferred region for the provider
  access_key = aws_iam_access_key.example_access_key.id
  secret_key = aws_iam_access_key.example_access_key.secret
}

provider "aws" {
  alias = "another_provider"
  region = "eu-west-1" // or your preferred region for the provider
  access_key = aws_iam_access_key.example_access_key.id
  secret_key = aws_iam_access_key.example_access_key.secret
}

resource "aws_instance" "example_instance" {
  provider = aws.example_provider
  // specify instance configuration here
}

resource "aws_instance" "another_example_instance" {
  provider = aws.another_provider
  // specify instance configuration here
}

output "account_id" {
  value = aws_organizations_account.example_account.id
}

output "access_key" {
  value = aws_iam_access_key.example_access_key.id
}

output "secret_key" {
  value = aws_iam_access_key.example_access_key.secret
}

------------------------------------------
#!/bin/bash

# List all accounts in the organization and filter by name
ACCOUNT_NAME="My Account"
ACCOUNT_ID=$(aws organizations list-accounts --query "Accounts[?Name=='$ACCOUNT_NAME'].Id" --output text | tr -d '[:space:]')

if [ -z "$ACCOUNT_ID" ]; then
  echo "Account with name '$ACCOUNT_NAME' not found"
  exit 1
fi

# Test the configuration by listing S3 buckets in the account
aws s3 ls --profile $ACCOUNT_ID

-------------------------------------
USERNAME="new-account-user"
aws iam create-user --user-name $USERNAME --profile $PROFILE_NAME
KEYS=$(aws iam create-access-key --user-name $USERNAME --profile $PROFILE_NAME)
ACCESS_KEY=$(echo $KEYS | jq -r '.AccessKey.AccessKeyId')
SECRET_KEY=$(echo $KEYS | jq -r '.AccessKey.SecretAccessKey')

-----------------------------------------------
if aws iam get-user --user-name $IAM_USER_NAME --profile $AWS_PROFILE > /dev/null 2>&1; then
    # Get the existing access key if it exists
    ACCESS_KEY_ID=$(aws iam list-access-keys --user-name $IAM_USER_NAME --profile $AWS_PROFILE --query 'AccessKeyMetadata[].AccessKeyId' --output text)
    if [ -n "$ACCESS_KEY_ID" ]; then
        SECRET_ACCESS_KEY=$(aws iam list-access-keys --user-name $IAM_USER_NAME --profile $AWS_PROFILE --query 'AccessKeyMetadata[?AccessKeyId==`'$ACCESS_KEY_ID'`].SecretAccessKey' --output text)
        echo "Access key already exists for IAM user $IAM_USER_NAME:"
        echo "Access key ID: $ACCESS_KEY_ID"
        echo "Secret access key: $SECRET_ACCESS_KEY"
    else
        # Create a new access key if one does not exist
        KEY_PAIR=$(aws iam create-access-key --user-name $IAM_USER_NAME --profile $AWS_PROFILE --query 'AccessKey')
        ACCESS_KEY_ID=$(echo $KEY_PAIR | jq -r '.AccessKeyId')
        SECRET_ACCESS_KEY=$(echo $KEY_PAIR | jq -r '.SecretAccessKey')
        echo "Access key created for IAM user $IAM_USER_NAME:"
        echo "Access key ID: $ACCESS_KEY_ID"
        echo "Secret access key: $SECRET_ACCESS_KEY"
    fi
else
